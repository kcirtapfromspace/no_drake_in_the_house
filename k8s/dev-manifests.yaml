apiVersion: v1
kind: Namespace
metadata:
  name: kiro-dev
  labels:
    name: kiro-dev
    environment: development
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kiro-dev
  labels:
    app: postgres
    component: database
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
        environment: development
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: kiro
        - name: POSTGRES_USER
          value: kiro
        - name: POSTGRES_PASSWORD
          value: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U kiro -d kiro
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U kiro -d kiro
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-data
        emptyDir: {}
      - name: postgres-config
        configMap:
          name: postgres-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: kiro-dev
data:
  postgresql.conf: |
    # Development optimized PostgreSQL configuration
    shared_buffers = 128MB
    effective_cache_size = 256MB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 2
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kiro-dev
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kiro-dev
  labels:
    app: redis
    component: cache
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
        environment: development
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kiro-dev
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: kiro-dev
  labels:
    app: backend
    component: api
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        component: api
        environment: development
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U kiro; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - /bin/sh
        - -c
        - |
          until redis-cli -h redis -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: backend
        image: kiro/backend
        imagePullPolicy: Never
        env:
        - name: DATABASE_URL
          value: postgres://kiro:password@postgres:5432/kiro
        - name: REDIS_URL
          value: redis://redis:6379
        - name: JWT_SECRET
          value: dev_jwt_secret_change_in_production_12345678901234567890
        - name: RUST_LOG
          value: debug
        - name: RUST_BACKTRACE
          value: "1"
        - name: SQLX_OFFLINE
          value: "true"
        - name: ENVIRONMENT
          value: development
        - name: CORS_ALLOWED_ORIGINS
          value: http://localhost:5000,http://localhost:5173,http://localhost:3000
        - name: AUTO_LOGIN_ENABLED
          value: "true"
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: kiro-dev
  labels:
    app: backend
    component: api
spec:
  selector:
    app: backend
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: kiro-dev
  labels:
    app: frontend
    component: web
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        component: web
        environment: development
    spec:
      initContainers:
      - name: wait-for-backend
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          until curl -f http://backend:3000/health; do
            echo "Waiting for backend..."
            sleep 5
          done
          echo "Backend is ready!"
      containers:
      - name: frontend
        image: kiro/frontend
        imagePullPolicy: Never
        env:
        - name: NODE_ENV
          value: development
        - name: VITE_API_URL
          value: http://localhost:3000
        - name: VITE_API_VERSION
          value: v1
        - name: VITE_ENVIRONMENT
          value: development
        ports:
        - containerPort: 5000
          name: http
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: kiro-dev
  labels:
    app: frontend
    component: web
spec:
  selector:
    app: frontend
  ports:
  - port: 5000
    targetPort: 5000
    name: http
  type: ClusterIP