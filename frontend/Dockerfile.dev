# syntax=docker/dockerfile:1.4
# Fast development Dockerfile for Svelte frontend with optimal caching
FROM node:18-alpine as builder

WORKDIR /app

# Install system dependencies with cache
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk add --no-cache curl

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm,sharing=locked \
    npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Runtime stage with nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/public /usr/share/nginx/html

# Copy nginx configuration
COPY nginx-dev.conf /etc/nginx/conf.d/default.conf

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf.bak 2>/dev/null || true

# Create nginx directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run /usr/share/nginx/html

# Create a simple index.html if none exists
RUN if [ ! -f /usr/share/nginx/html/index.html ]; then \
    echo '<html><body><h1>Kiro Frontend</h1><p>Development build</p></body></html>' > /usr/share/nginx/html/index.html; \
    fi

# Run as root for development (nginx will drop privileges automatically)
# USER nginx

EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]