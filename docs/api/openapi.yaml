openapi: 3.0.3
info:
  title: No Drake in the House API
  description: |
    Multi-platform music streaming blocklist management system API.
    
    This API provides endpoints for managing personal Do-Not-Play (DNP) lists,
    user authentication with 2FA support, and artist search functionality.
  version: 1.0.0
  contact:
    name: API Support
    url: https://github.com/your-org/no-drake-in-the-house
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.nodrakeinthe.house
    description: Production server

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the health status of the API and its dependencies
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /metrics:
    get:
      summary: Prometheus Metrics
      description: Returns Prometheus-formatted metrics for monitoring
      tags:
        - System
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

  /api/v1/auth/register:
    post:
      summary: Register User
      description: Create a new user account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: Login User
      description: Authenticate user with email, password, and optional 2FA code
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials or 2FA code required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/refresh:
    post:
      summary: Refresh Token
      description: Refresh access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/logout:
    post:
      summary: Logout User
      description: Invalidate user session and refresh token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/setup-2fa:
    post:
      summary: Setup 2FA
      description: Generate TOTP secret and QR code for 2FA setup
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 2FA setup information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotpSetupResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/verify-2fa:
    post:
      summary: Verify and Enable 2FA
      description: Verify TOTP code and enable 2FA for the user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotpVerifyRequest'
      responses:
        '200':
          description: 2FA enabled successfully
        '400':
          description: Invalid TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/profile:
    get:
      summary: Get User Profile
      description: Retrieve the current user's profile information
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update User Profile
      description: Update the current user's profile information
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/settings:
    get:
      summary: Get User Settings
      description: Retrieve the current user's settings
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update User Settings
      description: Update the current user's settings
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/artists/search:
    get:
      summary: Search Artists
      description: Search for artists by name with fuzzy matching
      tags:
        - Artists
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: limit
          in: query
          required: false
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  artists:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  total:
                    type: integer
                    description: Total number of matching artists
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dnp:
    get:
      summary: Get DNP List
      description: Retrieve the current user's Do-Not-Play list
      tags:
        - DNP Lists
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          required: false
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: DNP list entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/DnpEntryWithArtist'
                  total:
                    type: integer
                    description: Total number of DNP entries
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add to DNP List
      description: Add an artist to the user's Do-Not-Play list
      tags:
        - DNP Lists
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToDnpRequest'
      responses:
        '201':
          description: Artist added to DNP list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnpEntry'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Artist already in DNP list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dnp/{artist_id}:
    delete:
      summary: Remove from DNP List
      description: Remove an artist from the user's Do-Not-Play list
      tags:
        - DNP Lists
      security:
        - BearerAuth: []
      parameters:
        - name: artist_id
          in: path
          required: true
          description: Artist UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Artist removed from DNP list
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Artist not found in DNP list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        response_time_ms:
          type: integer
          minimum: 0
        details:
          type: object
          nullable: true

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 128

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        totp_code:
          type: string
          pattern: '^[0-9]{6}$'
          nullable: true

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    TotpVerifyRequest:
      type: object
      required:
        - totp_code
      properties:
        totp_code:
          type: string
          pattern: '^[0-9]{6}$'

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        access_token:
          type: string
        refresh_token:
          type: string

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string

    TotpSetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: Base32-encoded TOTP secret
        qr_code_url:
          type: string
          description: QR code URL for authenticator apps

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        settings:
          $ref: '#/components/schemas/UserSettings'

    UserSettings:
      type: object
      properties:
        notifications:
          type: object
          properties:
            email_enabled:
              type: boolean
              default: true
            enforcement_updates:
              type: boolean
              default: true
        privacy:
          type: object
          properties:
            profile_visibility:
              type: string
              enum: [public, private]
              default: private
        enforcement:
          type: object
          properties:
            auto_enforcement:
              type: boolean
              default: false
            preview_required:
              type: boolean
              default: true

    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        canonical_name:
          type: string
        external_ids:
          type: object
          description: Platform-specific artist IDs
          properties:
            spotify:
              type: string
              nullable: true
            apple_music:
              type: string
              nullable: true
        metadata:
          type: object
          description: Artist metadata
          properties:
            image_url:
              type: string
              format: uri
              nullable: true
            genres:
              type: array
              items:
                type: string
        created_at:
          type: string
          format: date-time

    AddToDnpRequest:
      type: object
      required:
        - artist_id
      properties:
        artist_id:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
          maxItems: 10
          nullable: true
        note:
          type: string
          maxLength: 500
          nullable: true

    DnpEntry:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        artist_id:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
          nullable: true
        note:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    DnpEntryWithArtist:
      allOf:
        - $ref: '#/components/schemas/DnpEntry'
        - type: object
          properties:
            artist:
              $ref: '#/components/schemas/Artist'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Human-readable error message
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          nullable: true
          description: Additional error context

tags:
  - name: System
    description: System health and monitoring endpoints
  - name: Authentication
    description: User authentication and 2FA management
  - name: User Management
    description: User profile and settings management
  - name: Artists
    description: Artist search and information
  - name: DNP Lists
    description: Do-Not-Play list management