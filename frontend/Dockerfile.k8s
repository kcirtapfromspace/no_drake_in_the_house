# syntax=docker/dockerfile:1.4
# Kubernetes-specific Dockerfile for frontend
FROM node:18-alpine as builder

WORKDIR /app

# Install system dependencies with cache
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk add --no-cache curl

# Copy package files for dependency caching
COPY package*.json ./

# Install all dependencies with aggressive caching
RUN --mount=type=cache,target=/root/.npm,sharing=locked \
    npm ci

# Copy source code
COPY . .

# Build for development
RUN npm run build

# Minimal nginx runtime
FROM nginx:alpine

# Install curl for health checks
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk add --no-cache curl

# Copy built application
COPY --from=builder /app/public /usr/share/nginx/html

# Copy simple nginx config (no backend proxy for now)
COPY nginx-simple.conf /etc/nginx/conf.d/default.conf

# Set up permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run /usr/share/nginx/html

# Ensure we have content to serve
RUN if [ ! -f /usr/share/nginx/html/index.html ]; then \
    echo '<html><body><h1>Kiro Frontend</h1><p>Kubernetes development build</p></body></html>' > /usr/share/nginx/html/index.html; \
    fi

EXPOSE 5000

# Health check
HEALTHCHECK --interval=10s --timeout=2s --start-period=3s --retries=2 \
    CMD curl -f http://localhost:5000/ || exit 1

CMD ["nginx", "-g", "daemon off;"]