name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kiro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
    
    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features postgres
    
    - name: Run database migrations
      working-directory: backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/kiro_test
      run: sqlx migrate run
    
    - name: Check Rust formatting
      working-directory: backend
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      working-directory: backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/kiro_test
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run backend tests
      working-directory: backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/kiro_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_secret_key_for_ci
        RUST_LOG: debug
      run: cargo test --all-features

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run TypeScript check
      working-directory: frontend
      run: npm run check
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --run

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
    
    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
    
    - name: Run Trivy config scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
    
    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
    
    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/rust
          p/typescript
    
    - name: Audit Rust dependencies
      working-directory: backend
      run: |
        cargo install cargo-audit
        cargo audit --deny warnings
    
    - name: Audit Node.js dependencies
      working-directory: frontend
      run: npm audit --audit-level moderate
    
    - name: Check for secrets with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run SAST with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-and-push:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        component: [api, worker, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.component }}.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true
    
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'
    
    - name: Sign container image with cosign
      uses: sigstore/cosign-installer@v3
    
    - name: Sign the published Docker image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|kiro/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}|g" k8s/api-deployment.yaml
        sed -i "s|kiro/worker:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ github.sha }}|g" k8s/worker-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ -n kiro-staging
        
        # Wait for rollout
        kubectl rollout status deployment/kiro-api -n kiro-staging --timeout=300s
        kubectl rollout status deployment/kiro-worker -n kiro-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=kiro-api -n kiro-staging --timeout=120s
        
        # Get service URL
        API_URL=$(kubectl get ingress kiro-ingress -n kiro-staging -o jsonpath='{.spec.rules[0].host}')
        
        # Run basic health checks
        curl -f https://$API_URL/health || exit 1
        curl -f https://$API_URL/ready || exit 1

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Deploy to production
      run: |
        # Update image tags in manifests
        sed -i "s|kiro/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}|g" k8s/api-deployment.yaml
        sed -i "s|kiro/worker:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ github.sha }}|g" k8s/worker-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ -n kiro-production
        
        # Wait for rollout
        kubectl rollout status deployment/kiro-api -n kiro-production --timeout=600s
        kubectl rollout status deployment/kiro-worker -n kiro-production --timeout=600s
    
    - name: Verify deployment
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=kiro-api -n kiro-production --timeout=300s
        
        # Get service URL
        API_URL=$(kubectl get ingress kiro-ingress -n kiro-production -o jsonpath='{.spec.rules[0].host}')
        
        # Run comprehensive health checks
        curl -f https://$API_URL/health || exit 1
        curl -f https://$API_URL/ready || exit 1
        curl -f https://$API_URL/metrics || exit 1