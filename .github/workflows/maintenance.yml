name: Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check Rust dependencies
      working-directory: backend
      run: |
        cargo install cargo-outdated
        cargo outdated --root-deps-only > rust_outdated.txt
        
        if [ -s rust_outdated.txt ]; then
          echo "ðŸ“¦ Rust dependencies need updates:"
          cat rust_outdated.txt
          echo "rust_updates=true" >> $GITHUB_ENV
        else
          echo "âœ… All Rust dependencies are up to date"
          echo "rust_updates=false" >> $GITHUB_ENV
        fi

    - name: Check Node.js dependencies
      working-directory: frontend
      run: |
        npm outdated > npm_outdated.txt || true
        
        if [ -s npm_outdated.txt ]; then
          echo "ðŸ“¦ Node.js dependencies need updates:"
          cat npm_outdated.txt
          echo "npm_updates=true" >> $GITHUB_ENV
        else
          echo "âœ… All Node.js dependencies are up to date"
          echo "npm_updates=false" >> $GITHUB_ENV
        fi

    - name: Create issue for dependency updates
      if: env.rust_updates == 'true' || env.npm_updates == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸ”„ Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`;
          
          let body = '## ðŸ“¦ Dependency Updates Available\n\n';
          body += 'The following dependencies have updates available:\n\n';
          
          if (process.env.rust_updates === 'true') {
            const fs = require('fs');
            const rustUpdates = fs.readFileSync('backend/rust_outdated.txt', 'utf8');
            body += '### Rust Dependencies\n```\n' + rustUpdates + '\n```\n\n';
          }
          
          if (process.env.npm_updates === 'true') {
            const fs = require('fs');
            const npmUpdates = fs.readFileSync('frontend/npm_outdated.txt', 'utf8');
            body += '### Node.js Dependencies\n```\n' + npmUpdates + '\n```\n\n';
          }
          
          body += '### Action Required\n';
          body += '- [ ] Review security implications of updates\n';
          body += '- [ ] Test updates in development environment\n';
          body += '- [ ] Update dependencies and create PR\n';
          
          // Check if issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'dependencies'
          });
          
          const existingIssue = issues.find(issue => issue.title.includes('Dependency Updates Available'));
          
          if (existingIssue) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              title: title,
              body: body
            });
          } else {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'maintenance']
            });
          }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Rust security audit
      working-directory: backend
      run: |
        cargo install cargo-audit
        cargo audit --json > rust_audit.json || true
        
        if [ -s rust_audit.json ] && [ "$(cat rust_audit.json)" != "{\"vulnerabilities\":{\"found\":false,\"count\":0},\"warnings\":{\"found\":false,\"count\":0}}" ]; then
          echo "ðŸš¨ Rust security vulnerabilities found"
          cat rust_audit.json
          echo "rust_vulns=true" >> $GITHUB_ENV
        else
          echo "âœ… No Rust security vulnerabilities found"
          echo "rust_vulns=false" >> $GITHUB_ENV
        fi

    - name: Node.js security audit
      working-directory: frontend
      run: |
        npm audit --json > npm_audit.json || true
        
        # Check if there are high or critical vulnerabilities
        HIGH_VULNS=$(cat npm_audit.json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(cat npm_audit.json | jq '.metadata.vulnerabilities.critical // 0')
        
        if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "ðŸš¨ Node.js security vulnerabilities found"
          echo "High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
          echo "npm_vulns=true" >> $GITHUB_ENV
        else
          echo "âœ… No critical Node.js security vulnerabilities found"
          echo "npm_vulns=false" >> $GITHUB_ENV
        fi

    - name: Create security issue
      if: env.rust_vulns == 'true' || env.npm_vulns == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸš¨ Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
          
          let body = '## ðŸš¨ Security Vulnerabilities Detected\n\n';
          body += '**Priority: HIGH** - Please address these vulnerabilities immediately.\n\n';
          
          if (process.env.rust_vulns === 'true') {
            const fs = require('fs');
            const rustAudit = fs.readFileSync('backend/rust_audit.json', 'utf8');
            body += '### Rust Vulnerabilities\n```json\n' + rustAudit + '\n```\n\n';
          }
          
          if (process.env.npm_vulns === 'true') {
            const fs = require('fs');
            const npmAudit = fs.readFileSync('frontend/npm_audit.json', 'utf8');
            body += '### Node.js Vulnerabilities\n```json\n' + npmAudit + '\n```\n\n';
          }
          
          body += '### Immediate Actions Required\n';
          body += '- [ ] Review vulnerability details\n';
          body += '- [ ] Update affected dependencies\n';
          body += '- [ ] Test fixes in development\n';
          body += '- [ ] Deploy security patches\n';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical', 'bug']
          });

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Cleanup old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          for (const workflow of workflows.workflows) {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              status: 'completed',
              per_page: 100
            });
            
            // Keep last 50 runs, delete older ones
            const runsToDelete = runs.workflow_runs.slice(50);
            
            for (const run of runsToDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run ${run.id}`);
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }
          }

    - name: Cleanup old container images
      uses: actions/github-script@v7
      with:
        script: |
          const packages = ['backend', 'frontend'];
          
          for (const packageName of packages) {
            try {
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: `${context.repo.repo}/${packageName}`,
                org: context.repo.owner,
                per_page: 100
              });
              
              // Keep last 20 versions, delete older untagged ones
              const versionsToDelete = versions
                .filter(version => version.metadata.container.tags.length === 0)
                .slice(20);
              
              for (const version of versionsToDelete) {
                try {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: `${context.repo.repo}/${packageName}`,
                    org: context.repo.owner,
                    package_version_id: version.id
                  });
                  console.log(`Deleted ${packageName} version ${version.id}`);
                } catch (error) {
                  console.log(`Failed to delete ${packageName} version ${version.id}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Failed to cleanup ${packageName}: ${error.message}`);
            }
          }