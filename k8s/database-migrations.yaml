apiVersion: v1
kind: ConfigMap
metadata:
  name: kiro-migrations
  namespace: kiro-production
  labels:
    app: kiro-migrations
data:
  001_initial_schema.sql: |
    -- Users table with authentication
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        settings JSONB DEFAULT '{}',
        email_verified BOOLEAN DEFAULT false,
        two_factor_enabled BOOLEAN DEFAULT false,
        two_factor_secret VARCHAR(255)
    );

    -- Service connections with health tracking
    CREATE TABLE IF NOT EXISTS connections (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        provider VARCHAR(50) NOT NULL,
        provider_user_id VARCHAR(255),
        scopes TEXT[],
        access_token_encrypted TEXT,
        refresh_token_encrypted TEXT,
        token_version INTEGER DEFAULT 1,
        expires_at TIMESTAMP,
        status VARCHAR(20) DEFAULT 'active',
        last_health_check TIMESTAMP,
        error_code TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(user_id, provider)
    );

    -- Rate limiting state per provider
    CREATE TABLE IF NOT EXISTS provider_rate_state (
        provider VARCHAR(50) PRIMARY KEY,
        remaining INTEGER DEFAULT 0,
        reset_at TIMESTAMP,
        window_size INTEGER DEFAULT 3600,
        updated_at TIMESTAMP DEFAULT NOW()
    );

    -- Artist catalog with disambiguation
    CREATE TABLE IF NOT EXISTS artists (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        canonical_name VARCHAR(255) NOT NULL,
        canonical_artist_id UUID REFERENCES artists(id),
        external_ids JSONB DEFAULT '{}',
        metadata JSONB DEFAULT '{}',
        aliases JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW()
    );

    -- User DNP lists
    CREATE TABLE IF NOT EXISTS user_artist_blocks (
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        artist_id UUID REFERENCES artists(id) ON DELETE CASCADE,
        tags TEXT[],
        note TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (user_id, artist_id)
    );

    -- Community lists with governance
    CREATE TABLE IF NOT EXISTS community_lists (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        owner_user_id UUID REFERENCES users(id),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        criteria TEXT NOT NULL,
        governance_url TEXT,
        update_cadence TEXT,
        version INTEGER DEFAULT 1,
        visibility VARCHAR(20) DEFAULT 'public',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS community_list_items (
        list_id UUID REFERENCES community_lists(id) ON DELETE CASCADE,
        artist_id UUID REFERENCES artists(id) ON DELETE CASCADE,
        rationale_link TEXT,
        added_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (list_id, artist_id)
    );

    -- List subscriptions
    CREATE TABLE IF NOT EXISTS user_list_subscriptions (
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        list_id UUID REFERENCES community_lists(id) ON DELETE CASCADE,
        version_pinned INTEGER,
        auto_update BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (user_id, list_id)
    );

    -- Action tracking with idempotency
    CREATE TABLE IF NOT EXISTS action_batches (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        provider VARCHAR(50) NOT NULL,
        idempotency_key TEXT UNIQUE,
        dry_run BOOLEAN DEFAULT false,
        status VARCHAR(20) DEFAULT 'pending',
        options JSONB DEFAULT '{}',
        summary JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW(),
        completed_at TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS action_items (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        batch_id UUID REFERENCES action_batches(id) ON DELETE CASCADE,
        entity_type VARCHAR(50) NOT NULL,
        entity_id VARCHAR(255) NOT NULL,
        action VARCHAR(50) NOT NULL,
        idempotency_key TEXT,
        before_state JSONB,
        after_state JSONB,
        status VARCHAR(20) DEFAULT 'pending',
        error_message TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(batch_id, entity_type, entity_id, action, idempotency_key)
    );

  002_indexes.sql: |
    -- Performance indexes
    CREATE INDEX IF NOT EXISTS idx_artists_external_ids_spotify ON artists USING GIN ((external_ids->>'spotify'));
    CREATE INDEX IF NOT EXISTS idx_artists_external_ids_apple ON artists USING GIN ((external_ids->>'apple'));
    CREATE INDEX IF NOT EXISTS idx_artists_external_ids_musicbrainz ON artists USING GIN ((external_ids->>'musicbrainz'));
    CREATE INDEX IF NOT EXISTS idx_artists_canonical ON artists(canonical_artist_id) WHERE canonical_artist_id IS NOT NULL;
    CREATE INDEX IF NOT EXISTS idx_action_items_batch ON action_items(batch_id);
    CREATE INDEX IF NOT EXISTS idx_action_items_provider_entity ON action_items(entity_type, entity_id);
    CREATE INDEX IF NOT EXISTS idx_connections_user_provider ON connections(user_id, provider);
    CREATE INDEX IF NOT EXISTS idx_connections_status ON connections(status);
    CREATE INDEX IF NOT EXISTS idx_user_artist_blocks_user ON user_artist_blocks(user_id);
    CREATE INDEX IF NOT EXISTS idx_community_list_items_list ON community_list_items(list_id);
    CREATE INDEX IF NOT EXISTS idx_user_list_subscriptions_user ON user_list_subscriptions(user_id);

  003_rate_limiting_and_jobs.sql: |
    -- Job queue table for background processing
    CREATE TABLE IF NOT EXISTS job_queue (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        job_type VARCHAR(100) NOT NULL,
        payload JSONB NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        priority INTEGER DEFAULT 0,
        max_retries INTEGER DEFAULT 3,
        retry_count INTEGER DEFAULT 0,
        scheduled_at TIMESTAMP DEFAULT NOW(),
        started_at TIMESTAMP,
        completed_at TIMESTAMP,
        error_message TEXT,
        created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE INDEX IF NOT EXISTS idx_job_queue_status_priority ON job_queue(status, priority DESC, scheduled_at);
    CREATE INDEX IF NOT EXISTS idx_job_queue_type ON job_queue(job_type);

    -- Rate limiting enhancements
    CREATE TABLE IF NOT EXISTS rate_limit_buckets (
        key VARCHAR(255) PRIMARY KEY,
        tokens INTEGER NOT NULL,
        last_refill TIMESTAMP DEFAULT NOW(),
        bucket_size INTEGER NOT NULL,
        refill_rate INTEGER NOT NULL
    );

  004_audit_compliance.sql: |
    -- Audit log for SOC2 compliance
    CREATE TABLE IF NOT EXISTS audit_log (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        actor_user_id UUID REFERENCES users(id),
        action VARCHAR(100) NOT NULL,
        subject_type VARCHAR(50) NOT NULL,
        subject_id VARCHAR(255) NOT NULL,
        before_state JSONB,
        after_state JSONB,
        ip_address INET,
        user_agent TEXT,
        session_id VARCHAR(255),
        correlation_id VARCHAR(255),
        created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE INDEX IF NOT EXISTS idx_audit_log_actor ON audit_log(actor_user_id);
    CREATE INDEX IF NOT EXISTS idx_audit_log_action ON audit_log(action);
    CREATE INDEX IF NOT EXISTS idx_audit_log_created_at ON audit_log(created_at);
    CREATE INDEX IF NOT EXISTS idx_audit_log_correlation ON audit_log(correlation_id);

    -- Data retention policy table
    CREATE TABLE IF NOT EXISTS data_retention_policies (
        table_name VARCHAR(100) PRIMARY KEY,
        retention_days INTEGER NOT NULL,
        last_cleanup TIMESTAMP,
        enabled BOOLEAN DEFAULT true
    );

    -- Insert default retention policies
    INSERT INTO data_retention_policies (table_name, retention_days) VALUES
    ('audit_log', 2555), -- 7 years for compliance
    ('action_items', 365), -- 1 year
    ('job_queue', 30), -- 30 days
    ('provider_rate_state', 7) -- 7 days
    ON CONFLICT (table_name) DO NOTHING;

  005_content_moderation.sql: |
    -- Content moderation for community lists
    CREATE TABLE IF NOT EXISTS moderation_queue (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        subject_type VARCHAR(50) NOT NULL, -- 'community_list', 'community_list_item'
        subject_id UUID NOT NULL,
        reporter_user_id UUID REFERENCES users(id),
        reason VARCHAR(100) NOT NULL,
        description TEXT,
        status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'escalated'
        moderator_user_id UUID REFERENCES users(id),
        moderator_notes TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        resolved_at TIMESTAMP
    );

    CREATE INDEX IF NOT EXISTS idx_moderation_queue_status ON moderation_queue(status);
    CREATE INDEX IF NOT EXISTS idx_moderation_queue_subject ON moderation_queue(subject_type, subject_id);

    -- Appeals system
    CREATE TABLE IF NOT EXISTS appeals (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        moderation_id UUID REFERENCES moderation_queue(id),
        appellant_user_id UUID REFERENCES users(id),
        appeal_reason TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        reviewer_user_id UUID REFERENCES users(id),
        reviewer_notes TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        resolved_at TIMESTAMP
    );

    CREATE INDEX IF NOT EXISTS idx_appeals_status ON appeals(status);
    CREATE INDEX IF NOT EXISTS idx_appeals_moderation ON appeals(moderation_id);