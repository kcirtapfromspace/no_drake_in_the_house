name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kiro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: backend

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Set up environment
      working-directory: backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/kiro_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "JWT_SECRET=test_jwt_secret_for_ci" >> .env

    - name: Run database migrations
      working-directory: backend
      run: sqlx migrate run

    - name: Check code formatting
      working-directory: backend
      run: cargo fmt --all -- --check

    - name: Run clippy
      working-directory: backend
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      working-directory: backend
      run: cargo test --lib

    - name: Run integration tests
      working-directory: backend
      run: cargo test --test '*' --no-fail-fast
      env:
        RUST_LOG: debug

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run type checking
      working-directory: frontend
      run: npm run check

    - name: Run tests
      working-directory: frontend
      run: npm test -- --run

    - name: Build frontend
      working-directory: frontend
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to staging
      run: |
        # Update image tags in Helm values
        sed -i "s|backend:.*|backend: ${{ needs.build-images.outputs.backend-image }}|" helm/values-staging.yaml
        sed -i "s|frontend:.*|frontend: ${{ needs.build-images.outputs.frontend-image }}|" helm/values-staging.yaml
        
        # Deploy using Helm
        helm upgrade --install kiro-staging ./helm \
          --namespace kiro-staging \
          --create-namespace \
          --values helm/values-staging.yaml \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/kiro-backend -n kiro-staging
        kubectl wait --for=condition=available --timeout=300s deployment/kiro-frontend -n kiro-staging
        
        # Run basic health checks
        kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
          curl -f http://kiro-backend.kiro-staging.svc.cluster.local:3000/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to production
      run: |
        # Update image tags in Helm values
        sed -i "s|backend:.*|backend: ${{ needs.build-images.outputs.backend-image }}|" helm/values-production.yaml
        sed -i "s|frontend:.*|frontend: ${{ needs.build-images.outputs.frontend-image }}|" helm/values-production.yaml
        
        # Deploy using Helm with blue-green strategy
        helm upgrade --install kiro-production ./helm \
          --namespace kiro-production \
          --create-namespace \
          --values helm/values-production.yaml \
          --wait --timeout=15m

    - name: Run production health checks
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/kiro-backend -n kiro-production
        kubectl wait --for=condition=available --timeout=600s deployment/kiro-frontend -n kiro-production
        
        # Run comprehensive health checks
        kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
          curl -f http://kiro-backend.kiro-production.svc.cluster.local:3000/health

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-images, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' }}
      run: |
        echo "✅ Pipeline completed successfully"
        echo "Backend tests: ${{ needs.test-backend.result }}"
        echo "Frontend tests: ${{ needs.test-frontend.result }}"
        echo "Build images: ${{ needs.build-images.result }}"
        echo "Deploy staging: ${{ needs.deploy-staging.result }}"
        echo "Deploy production: ${{ needs.deploy-production.result }}"

    - name: Notify on failure
      if: ${{ needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.build-images.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed"
        echo "Backend tests: ${{ needs.test-backend.result }}"
        echo "Frontend tests: ${{ needs.test-frontend.result }}"
        echo "Build images: ${{ needs.build-images.result }}"
        echo "Deploy staging: ${{ needs.deploy-staging.result }}"
        echo "Deploy production: ${{ needs.deploy-production.result }}"
        exit 1